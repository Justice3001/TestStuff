The error you're seeing, **`ERR_SSL_PROTOCOL_ERROR`**, typically happens when the browser tries to establish a secure HTTPS connection (via SSL/TLS) but encounters an issue, such as when there’s no valid SSL certificate for the server.

### Why it happens:
By default, when you access `https://localhost:3000`, the browser attempts to establish a secure connection using HTTPS. However, unless you’ve explicitly set up an SSL certificate for your local server, your server is likely running on HTTP, not HTTPS, which causes the error.

### Solutions to Fix the Issue:

#### 1. **Access via HTTP instead of HTTPS**
Since your server is likely running on HTTP (not HTTPS), you should access it via `http://localhost:3000` in your browser, rather than `https://localhost:3000`. This should resolve the issue as your server isn't set up to handle HTTPS by default.

**Correct URL in the browser:**
```
http://localhost:3000
```

#### 2. **Use HTTPS with Self-Signed Certificates (Optional)**

If you specifically want to use HTTPS locally for testing purposes, you can set up **self-signed SSL certificates**. Here’s how you can do it:

##### Steps to set up HTTPS on your local server:

1. **Generate a Self-Signed SSL Certificate**:
   You can use `openssl` to generate the certificates. In your terminal, run the following commands:

   ```bash
   openssl genpkey -algorithm RSA -out private-key.pem
   openssl req -new -key private-key.pem -out csr.pem
   openssl x509 -req -in csr.pem -signkey private-key.pem -out certificate.pem
   ```

   These commands will generate:
   - `private-key.pem`: The private key for the SSL certificate.
   - `certificate.pem`: The self-signed certificate.

2. **Update Your Express App to Use HTTPS**:

   In your app, you can modify the server to use HTTPS by providing the certificate files:

   ```javascript
   import express from 'express';
   import cors from 'cors';
   import dotenv from 'dotenv';
   import morgan from 'morgan';
   import https from 'https';
   import fs from 'fs';
   import userRoutes from './routes/routes.js';

   dotenv.config();

   const app = express();

   // Middleware
   app.use(cors());
   if (process.env.NODE_ENV !== 'production') {
       app.use(morgan('dev')); // Only log in non-production environments
   }
   app.use(express.json()); // Use express's built-in JSON parser

   // Routes
   app.use('/api', userRoutes);

   // Health check
   app.get('/', (req, res) => {
       res.status(200).json({ message: 'Server is running!' });
   });

   // Error handling middleware
   app.use((err, req, res, next) => {
       console.error(err.stack);
       res.status(500).json({ message: 'Something went wrong!' });
   });

   // Server
   const PORT = process.env.PORT || 3000;

   // Provide the self-signed certificates here
   const options = {
       key: fs.readFileSync('path_to_private-key.pem'),
       cert: fs.readFileSync('path_to_certificate.pem'),
   };

   https.createServer(options, app).listen(PORT, () => {
       console.log(`Server running on https://localhost:${PORT}`);
   });
   ```

   Replace `'path_to_private-key.pem'` and `'path_to_certificate.pem'` with the actual file paths to your certificate and key.

3. **Access Your Server via HTTPS**:
   After configuring HTTPS, you can access your app in the browser using:
   ```
   https://localhost:3000
   ```

   **Note**: Since you are using a self-signed certificate, the browser might show a security warning, which you can bypass for local testing.

### Summary:
- **For local testing**, use `http://localhost:3000` instead of `https://localhost:3000` if you are not setting up HTTPS.
- **To use HTTPS locally**, you'll need to set up a self-signed certificate and modify your server to handle HTTPS requests.

Let me know if you need help with any of these steps!
